{"version":3,"sources":["serviceWorker.js","SizeCalculator.js","index.js"],"names":["Boolean","window","location","hostname","match","SizeCalculator","useState","sizes","setSizes","types","setTypes","temp","setTemp","defSize","setDefSize","delSize","setDelSize","sizeLevel","XXS","XS","S","M","L","XL","XXL","onAddSize","includes","split","from","to","i","concat","parseInt","ts","sort","a","b","Object","keys","document","getElementById","value","onAddType","type","onInputSize","e","target","onEnterSize","keyCode","onEnterType","saveImg","scrollTo","html2canvas","letterRendering","canvas","img","toDataURL","link","createElement","download","href","body","appendChild","click","className","id","onChange","onKeyDown","onClick","map","v","row","parseFloat","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bac9409c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport html2canvas from 'html2canvas'; \nimport './SizeCalculator.css';\n\n\nfunction SizeCalculator() {\n    const [sizes, setSizes] = useState([])\n    const [types, setTypes] = useState([])\n\n    const [temp, setTemp] = useState(0)\n\n    const [defSize, setDefSize] = useState({})\n    const [delSize, setDelSize] = useState({})\n\n    const sizeLevel = {\n        XXS : 0,\n        XS : 1,\n        S : 2,\n        M : 3,\n        L : 4,\n        XL : 5,\n        XXL : 6\n    }\n\n    const onAddSize = () => {\n        if (temp != -1) {\n            if(temp.includes('~')) {\n                const [from, to] = temp.split('~');\n                for(let i=parseInt(from);i<=parseInt(to);i+=10) {\n                    setSizes(sizes => sizes.concat(i));\n                }\n            }\n            else if (temp.includes(',')) {\n                const ts = temp.split(',');\n                setSizes(types => types.concat(ts));\n            }\n            else \n                setSizes(sizes => sizes.concat(temp));\n            setSizes(sizes => sizes.sort((a,b)=>{\n                if (Object.keys(sizeLevel).includes(a)) a = sizeLevel[a];\n                if (Object.keys(sizeLevel).includes(b)) b = sizeLevel[b];\n                return a-b;\n            }))\n            document.getElementById('inputSize').value = '';\n            setTemp(-1);\n        }\n    }\n\n    const onAddType = () => {\n        if (temp != -1) {\n            if(temp.includes(',')) {\n                const ts = temp.split(',');\n                for(const type of ts) {\n                    defSize[type] = 0\n                    delSize[type] = 0\n                }\n                setTypes(types => types.concat(ts));\n            }\n            else {\n                defSize[temp] = 0\n                delSize[temp] = 0\n                setTypes(types => types.concat(temp));\n            }\n            document.getElementById('inputType').value = '';\n            setTemp(-1);\n        }\n    }\n\n    const onInputSize = (e) => {\n        setTemp(e.target.value);\n    }\n\n    const onChangeDefSize = (type) => {\n        return (e) => {\n            setDefSize({\n                ...defSize,\n                [type]: e.target.value\n            })\n        }\n    }\n\n    const onChangeDelSize = (type) => {\n        return (e) => {\n            setDelSize({\n                ...delSize,\n                [type]: e.target.value\n            })\n        }\n    }\n\n    const onEnterSize = (e) => {\n        if(e.keyCode == 13)\n        {\n            onAddSize();\n        }\n    }\n\n    const onEnterType = (e) => {\n        if(e.keyCode == 13)\n        {\n            onAddType();\n        }\n    }\n\n    const saveImg = async () => {\n        window.scrollTo(0,0);\n        const canvas = await html2canvas(document.getElementById('sizeTable')\n            , {\n                letterRendering: 1\n            })\n            const img = canvas.toDataURL('image/png');\n            const link = document.createElement(\"a\");\n            link.download = '사이즈표.png';\n            link.href = img;\n            document.body.appendChild(link);\n            link.click();\n\n    }\n    \n    return (\n        <div className=\"frame\">\n            <div className=\"add\">\n                    <p className=\"txt\">사이즈 추가 (ex: 90~130)</p>\n                    {(() => {\n                        return <div className=\"inlinediv\">\n                            <input id=\"inputSize\" onChange={onInputSize} onKeyDown={onEnterSize}></input>\n                            <button onClick={onAddSize}>추가</button>\n                            </div>\n                    })()}\n                </div>\n\n                <div className=\"add\">\n                    <p className=\"txt\">측정 대상 추가 (ex: 길이,소매,어깨)</p>\n                    {(() => {\n                            return <div className=\"inlinediv\">\n                                <input id=\"inputType\" onChange={onInputSize} onKeyDown={onEnterType}></input>\n                                <button onClick={onAddType}>추가</button>\n                                </div>\n                        })()}\n                </div>\n            <div>\n                <table id=\"sizeTable\">\n                    <tr className=\"head\">\n                        <th className=\"left\">사이즈</th>\n                        {types.map((v) => {return <th>{v}</th>})}\n                    </tr>\n                    {sizes.map((row, i) => {return (\n                        <tr>\n                            <th className=\"left\">{row}</th>\n                            {types.map((v) => {return <th>{parseFloat(defSize[v])+(parseFloat(delSize[v])*(i))}</th>})}\n                        </tr>\n                    )})}\n                </table>\n                <table>\n                    <tr>\n                        <th></th>\n                        {types.map((v) => {return <th>{v}</th>})}\n                    </tr>\n                    <tr>\n                        <th>기본사이즈</th>\n                        {types.map((v) => {return <th className=\"cell\"><input onChange={onChangeDefSize(v)}></input></th>})}\n                    </tr>\n                    <tr>\n                        <th>증가량</th>\n                        {types.map((v) => {return <th className=\"cell\"><input onChange={onChangeDelSize(v)}></input></th>})}\n                    </tr>\n                </table>\n                <button className=\"save\" onClick={saveImg}>저장</button>\n            </div>\n        </div>\n    );\n}\nexport default SizeCalculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SizeCalculator from './SizeCalculator';\n\nReactDOM.render(<SizeCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}